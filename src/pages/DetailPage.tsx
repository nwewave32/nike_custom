import Accordion from "components/Accordion";
import { CarouselButton } from "components/CarouselButton";
import FlexBox from "components/FlexBox";
import LinkButton from "components/LinkButton";
import StarScore from "components/StarScore";
import { reviews } from "features/detail/constant";
import { gara } from "features/shop/constant";
import { useLayoutEffect, useRef, useState } from "react";
import styled, { css } from "styled-components";
import { colorSet } from "styles/ColorSet";
import { EmptySpace } from "styles/GlobalStyle";
import { Sort } from "types/Product";
import { Review } from "types/Review";

const MainContainer = styled.div`
  width: 100vw;
  background-color: ${colorSet.primaryOnDark};
`;
const DetailContainer = styled.div`
  width: 100%;
  padding: 0 48px;
  display: grid;
  grid-template-columns: repeat(12, minmax(0, 1fr));
  max-width: 1920px;
  margin: auto;
`;
const ProductImagery = styled.div`
  display: grid;
  grid-column: 1 / 7;
  grid-row: 1 / 3;
  padding-top: 48px;

  box-sizing: border-box;
`;

const ProductImageryWrapper = styled(FlexBox)`
  gap: 16px;
  position: sticky;
  top: 40px;
  padding-left: 48px;
  margin: 0 8px;
  max-height: 669px;
  min-height: 455px;
  box-sizing: border-box;
`;

const ThumbnailListContainer = styled(FlexBox)`
  flex-grow: 1;
  gap: 8px;
  min-width: 60px;
  max-width: 60px;
  height: 100%;
  scrollbar-width: none;
  overflow-y: scroll;
  overscroll-behavior: none;
`;

const Thumbnail = styled.img`
  position: relative;
  height: 60px;
  width: 60px;
  background-color: #f5f5f5;
  border-radius: 4px;
  cursor: pointer;
`;

const HeroImageContainer = styled(FlexBox)`
  max-width: 535px;
  border-radius: 8px;
  overflow: hidden;
  position: relative;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  box-sizing: border-box;
`;

const HeroImageWrapper = styled.div`
  width: 100%;
  aspect-ratio: 1 / 1.25;
`;
const HeroImage = styled.img`
  width: 100%;
  background-color: #f5f5f5;

  position: absolute;
  top: 0;
  left: 0;
  aspect-ratio: 1 / 1.25;
  opacity: 1;
  z-index: 0;

  max-width: 100%;
`;

const CarouselBtnWrapper = styled(FlexBox)`
  position: absolute;
  bottom: 24px;
  right: 24px;
  gap: 8px;
`;

const ProductTitleWrapper = styled.div`
  max-width: 400px;
  grid-column: 7 / undefined;
  grid-row: 1 / undefined;
  padding-top: 48px;
  padding-left: 24px;
  margin-bottom: 8px;
`;

const ProductTitle = styled.h1`
  font: var(--podium-cds-typography-320-to-1919-title4);
  text-align: start;
`;

const ProductSubTitle = styled.h2`
  font: var(--podium-cds-typography-body1);
  color: #707072;
  text-align: start;
`;

const ProductDetail = styled.div`
  max-width: 400px;
  padding-left: 24px;
  grid-column: 7 / undefined;
  grid-row: 2 / undefined;
`;

const ProductPrice = styled.div`
  margin-bottom: 32px;
  font: var(--podium-cds-typography-body1-strong);
  text-align: start;
  display: inline;
`;

const ProductColorContainer = styled.div`
  margin-bottom: 32px;
`;

const PickerWrapper = styled(FlexBox)`
  margin-top: 32px;
  flex-flow: row wrap;
  overflow-x: initial;
  -webkit-column-gap: 4px;
  column-gap: 4px;
  width: 100%;
`;
const PickerItemWrapper = styled.div`
  position: relative;
  margin-bottom: 10px;
  border-radius: 5px;
  overflow: hidden;
`;

interface PickerItemProps {
  isSoldOut: boolean;
  isSelected: boolean;
}

const shouldForwardProp = (prop: string) =>
  !["isSoldOut", "isSelected"].includes(prop);

const PickerItem = styled.img.withConfig({
  shouldForwardProp,
})<PickerItemProps>`
  background-color: #f5f5f5;
  min-width: 70px;
  min-height: 70px;
  width: 70px;
  height: 70px;
  cursor: pointer;
  ${({ isSoldOut }) =>
    isSoldOut &&
    css`
      opacity: 0.36;
      cursor: none;
    `}

  &:hover {
    border: 1px solid #111;
    border-radius: 5px;
  }
  ${({ isSelected }) =>
    isSelected &&
    css`
      border: 1px solid #111;
      border-radius: 5px;
    `}
`;

const SoldOutSlash = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  width: 70px;
  height: 70px;
  border-radius: 5px;
  background-color: rgba(17, 17, 17, 0.1);

  display: inline-block;
  z-index: 1;
`;

const SoldOutSvg = styled.svg`
  z-index: 2;
  border-radius: 5px;
  padding: 8px;
`;

const SoldOutLine = styled.line`
  z-index: 3;
  shape-rendering: crispEdges;
  stroke: #ffffff;
  stroke-width: 1.5px;
`;

const ProductSizeContainer = styled(FlexBox)`
  margin-bottom: 32px;
  margin-top: 20px;
`;

const ProductSizeTitleWrapper = styled(FlexBox)`
  width: 100%;
`;

const ProductSizeTitle = styled.span`
  font: var(--podium-cds-typography-body1-strong);
`;

const ProductSizeGuideWrapper = styled(FlexBox)`
  gap: 4px;
  cursor: pointer;
`;
const ProductSizeGuide = styled.span`
  font: var(--podium-cds-typography-body2-strong);
`;

const ProductSizePicker = styled.div`
  padding-top: 12px;
  margin: 0px auto;
  display: grid;
  grid-template-columns: repeat(5, minmax(0px, 1fr));
  gap: 7px;
  max-width: 100%;
  border: 1px solid transparent;
  border-radius: 4px;
  width: 100%;
`;

interface ProductSizeItemProps {
  isSelected: boolean;
}

const ProductSizeItem = styled(FlexBox).withConfig({
  shouldForwardProp: (prop: string) => prop !== "isSelected",
})<ProductSizeItemProps>`
  grid-column: span 1;
  -webkit-box-align: center;
  align-items: center;
  border: 1px solid #e5e5e5;
  border-radius: 4px;
  display: flex;
  height: 48px;
  -webkit-box-pack: center;
  justify-content: center;
  cursor: pointer;

  &:hover {
    border: 1px solid #111;
  }
  ${({ isSelected }) => isSelected && `border: 1px solid #111;`}
`;

const ButtonWrapper = styled(FlexBox)`
  width: 100%;
  gap: 8px;
`;

const CustomButton = styled(LinkButton)`
  font: var(--podium-cds-typography-body1-strong);
  width: 100%;
  text-align: center;
  padding: 18px 24px;
  ${({ mode }) =>
    mode === "dark" &&
    css`
      border: 1.5px solid #cacacb;
      &:hover {
        border: 1.5px solid #111;
        background-color: ${colorSet.primaryOnDark};
      }
    `};
`;

const CustomButtonTitle = styled(FlexBox)`
  width: 100%;

  > span {
    display: inline;
    max-height: 24px;
    :last-child {
      margin: 0 4px;
    }
  }
`;

const PickUpContainer = styled(FlexBox)`
  width: 100%;
  padding: 24px 0;
`;

const PickUpTitle = styled.div`
  width: 100%;
  font: var(--podium-cds-typography-body1-strong);
`;

const FindStoreButton = styled.button`
  font-weight: 500;
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-size: 16px;
  font: var(--podium-cds-typography-body1-strong);
  line-height: 1.5;
  cursor: pointer;
  box-shadow: rgb(17, 17, 17) 0px -1px 0px 0px inset;
  padding: 2px 0;

  border-radius: 0px;
  transition: 0.2s;

  &:hover {
    box-shadow: rgb(17, 17, 17) 0px -1.5px 0px 0px inset;
  }
`;

const FindStoreDesc = styled.div`
  color: #707072;

  margin-top: 20px;

  display: inline-block;

  font: var(--podium-cds-typography-body2);
`;

const ProductDescContainer = styled(FlexBox)`
  padding-top: 28px;
`;

const ProductDesc = styled.p`
  font: var(--podium-cds-typography-body1);
  text-align: start;
`;

const ProductDescLi = styled.li`
  display: list-item;
  font: var(--podium-cds-typography-body1);
  list-style: disc;
  margin-left: 27px;
  padding-bottom: 4px;
`;

const MoreDetailBtn = styled(FindStoreButton)`
  margin-top: 30px;
`;

const PREV: "prev" = "prev";
const NEXT: "next" = "next";

const item = gara[0];

function DetailPage() {
  const [curImg, setCurImg] = useState(0);
  const [selectedSize, setSelectedSize] = useState(0);
  const [selectedSort, setSelectedSort] = useState<null | Sort>();

  useLayoutEffect(() => {
    setSelectedSort(() => {
      return item.sort[20];
    });
  }, []);

  const handleClick = (
    e: React.MouseEvent<HTMLElement, MouseEvent>,
    type: typeof PREV | typeof NEXT
  ) => {
    e.preventDefault();

    setCurImg((prev) => {
      let result = 0;
      if (type === PREV) {
        if (prev === 0) result = item.image.length - 1;
        else result = prev - 1;
      } else {
        if (prev === item.image.length - 1) result = 0;
        else result = prev + 1;
      }

      return result;
    });
  };

  const formatPrice = (price: number) => {
    const priceStr = price.toString();
    return priceStr.replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " Ïõê";
  };
  return (
    <MainContainer>
      <EmptySpace height={60} />
      <DetailContainer>
        <ProductImagery>
          <ProductImageryWrapper justify="flex-end" align="flex-start">
            <ThumbnailListContainer direction="column">
              {item.thumnails.map((image, idx) => (
                <Thumbnail src={image} onClick={() => setCurImg(idx)} />
              ))}
            </ThumbnailListContainer>
            <HeroImageContainer align="flex-start">
              <HeroImageWrapper>
                <HeroImage src={item.image[curImg]} />
              </HeroImageWrapper>
              <CarouselBtnWrapper>
                {[PREV, NEXT].map((item) => (
                  <CarouselButton
                    type={item}
                    disabled={false}
                    onClick={(e) => handleClick(e, item)}
                    size={36}
                  />
                ))}
              </CarouselBtnWrapper>
            </HeroImageContainer>
          </ProductImageryWrapper>
        </ProductImagery>
        <ProductTitleWrapper>
          <ProductTitle>{item.title} </ProductTitle>
          <ProductSubTitle>{item.subtitle}</ProductSubTitle>
        </ProductTitleWrapper>
        <ProductDetail>
          <ProductPrice>{formatPrice(item.price)}</ProductPrice>
          <ProductColorContainer>
            <PickerWrapper>
              {item.sort.map((item, idx) => (
                <PickerItemWrapper>
                  <PickerItem
                    isSelected={
                      selectedSort ? item.id === selectedSort.id : false
                    }
                    onClick={() => setSelectedSort(item)}
                    isSoldOut={item.soldOut}
                    src={item.url}
                    alt={item.name}
                  />
                  {item.soldOut && (
                    <SoldOutSlash>
                      <SoldOutSvg
                        width="100%"
                        height="100%"
                        viewBox="0 0 125 125"
                        preserveAspectRatio="none"
                        color="yellow"
                      >
                        <SoldOutLine
                          x1="125"
                          y1="125"
                          x2="0"
                          y2="0"
                        ></SoldOutLine>
                      </SoldOutSvg>
                    </SoldOutSlash>
                  )}
                </PickerItemWrapper>
              ))}
            </PickerWrapper>
          </ProductColorContainer>
          <ProductSizeContainer direction="column">
            <ProductSizeTitleWrapper justify="space-between">
              <ProductSizeTitle>ÏÇ¨Ïù¥Ï¶à ÏÑ†ÌÉù</ProductSizeTitle>
              <ProductSizeGuideWrapper>
                <svg
                  aria-hidden="true"
                  focusable="false"
                  viewBox="0 0 24 24"
                  role="img"
                  width="24px"
                  height="24px"
                  fill="none"
                >
                  <path
                    stroke="currentColor"
                    stroke-width="1.5"
                    d="M21.75 10.5v6.75a1.5 1.5 0 01-1.5 1.5H3.75a1.5 1.5 0 01-1.5-1.5V10.5m3.308-2.25h12.885"
                  ></path>
                  <path
                    stroke="currentColor"
                    stroke-width="1.5"
                    d="M15.79 5.599l2.652 2.65-2.652 2.653M8.21 5.599l-2.652 2.65 2.652 2.653M17.25 19v-2.5M12 19v-2.5M6.75 19v-2.5"
                  ></path>
                </svg>
                <ProductSizeGuide>ÏÇ¨Ïù¥Ï¶à Í∞ÄÏù¥Îìú</ProductSizeGuide>
              </ProductSizeGuideWrapper>
            </ProductSizeTitleWrapper>
            <ProductSizePicker>
              {item.size.map((size) => (
                <ProductSizeItem
                  isSelected={size === selectedSize}
                  onClick={() => setSelectedSize(size)}
                >
                  {size}
                </ProductSizeItem>
              ))}
            </ProductSizePicker>
          </ProductSizeContainer>
          <ButtonWrapper direction="column">
            <CustomButton mode="light" href="#">
              <CustomButtonTitle justify="center">Ïû•Î∞îÍµ¨Îãà</CustomButtonTitle>
            </CustomButton>
            <CustomButton mode="dark" href="#">
              <CustomButtonTitle justify="center">
                <span>ÏúÑÏãúÎ¶¨Ïä§Ìä∏</span>

                <span>
                  <svg
                    aria-hidden="true"
                    focusable="false"
                    viewBox="0 0 24 24"
                    role="img"
                    width="24px"
                    height="24px"
                    fill="none"
                  >
                    <path
                      stroke="currentColor"
                      strokeWidth="1.5"
                      d="M16.794 3.75c1.324 0 2.568.516 3.504 1.451a4.96 4.96 0 010 7.008L12 20.508l-8.299-8.299a4.96 4.96 0 010-7.007A4.923 4.923 0 017.205 3.75c1.324 0 2.568.516 3.504 1.451l.76.76.531.531.53-.531.76-.76a4.926 4.926 0 013.504-1.451"
                    ></path>
                  </svg>
                </span>
              </CustomButtonTitle>
            </CustomButton>
          </ButtonWrapper>
          <PickUpContainer direction="column" align="flex-start">
            <PickUpTitle>Î¨¥Î£å ÌîΩÏóÖ</PickUpTitle>
            <FindStoreButton>Îß§Ïû• Ï∞æÍ∏∞</FindStoreButton>
            <FindStoreDesc>Ï£ºÎ¨∏Í≤∞Ï†ú Ïãú Îß§Ïû• ÌîΩÏóÖ ÏÑ†ÌÉù Í∞ÄÎä•</FindStoreDesc>
          </PickUpContainer>
          <ProductDescContainer direction="column" align="flex-start">
            <ProductDesc>
              40Ïó¨ ÎÖÑ Ï†Ñ Ï≤òÏùå Ï∂úÏãúÎêòÏóàÏùÑ ÎïåÏôÄ ÎßàÏ∞¨Í∞ÄÏßÄÎ°ú Ïò§ÎäòÎÇ†ÏóêÎèÑ Î©ãÏßÑ AF1ÏùÄ
              ÎØøÏùÑ Ïàò ÏûàÎäî ÌÅ¥ÎûòÏãù ÏïÑÏù¥ÌÖúÏûÖÎãàÎã§. ÎÇ¥Íµ¨ÏÑ±Ïù¥ Îõ∞Ïñ¥ÎÇú Íµ¨Ï°∞ÏôÄ ÏóêÏñ¥
              Ïø†ÏÖîÎãù, Ï†ëÏßÄÎ†•Ïù¥ Ïö∞ÏàòÌïú Ìä∏Î†àÎìúÎ°ú Ìú¥Ïãù Ï§ëÏóêÎèÑ, Ìú¥Ïãù ÌõÑÏóêÎèÑ Ïã†Í∏∞
              Ï¢ãÏäµÎãàÎã§. ÏÉÅÏûêÏóêÏÑú Í∫ºÎÇ∏ ÏÉà ÏÉÅÌíàÎèÑ ÌõåÎ•≠ÌïòÏßÄÎßå, Ìù†ÏßëÏù¥ÎÇò Í∏ÅÌûå ÏûêÍµ≠Ïù¥
              ÏÉùÍ≤®ÎèÑ Ïó¨Ï†ÑÌûà Î©ãÏßÑ Î∂ÑÏúÑÍ∏∞Î•º Ïú†ÏßÄÌï©ÎãàÎã§. Ïò§ÌûàÎ†§ Îçî Í∑ºÏÇ¨Ìï¥Ïßà ÏàòÎèÑ
              ÏûàÏ£†.
            </ProductDesc>
            <br />
            <ul>
              <ProductDescLi>{`ÌòÑÏû¨ Ïª¨Îü¨:${selectedSort ? selectedSort.name : "ÌôîÏù¥Ìä∏/Îß§ÏßÅ Ïó†Î≤Ñ"}`}</ProductDescLi>
              <ProductDescLi>Ïä§ÌÉÄÏùº Î≤àÌò∏:FV5948-117</ProductDescLi>
              <ProductDescLi>Ï†úÏ°∞ Íµ≠Í∞Ä/ÏßÄÏó≠: Ïù∏ÎèÑÎÑ§ÏãúÏïÑ</ProductDescLi>
            </ul>
          </ProductDescContainer>
          <MoreDetailBtn>ÏÉÅÌíà ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î≥¥Í∏∞</MoreDetailBtn>
          <Accordion title="Î¨¥Î£å Î∞∞ÏÜ° Î∞è Î∞òÌíà">
            <FreeDeliverGuide />
          </Accordion>

          <Accordion title={`Î¶¨Î∑∞(12)`} score={4}>
            <ReviewSection score={4} />
          </Accordion>

          <Accordion title="Ï∂îÍ∞Ä Ï†ïÎ≥¥">
            <AdditionalInfo />
          </Accordion>
        </ProductDetail>
      </DetailContainer>
      <EmptySpace height={500} />
    </MainContainer>
  );
}

export default DetailPage;

const GuideContainer = styled(FlexBox)`
  font: var(--podium-cds-typography-body1);
  & a {
    margin-left: 4px;
  }
`;
const FreeDeliverGuide = () => {
  return (
    <GuideContainer direction="column" align="flex-start">
      <p>ÏùºÎ∞ò Î∞∞ÏÜ°</p>
      <p>‚Ä¢ Î∞∞ÏÜ°ÏßÄÏó≠: Ï†ÑÍµ≠ (ÏùºÎ∂Ä ÏßÄÏó≠ Ï†úÏô∏)</p>
      <p>‚Ä¢ Î∞∞ÏÜ°ÎπÑ: Î¨¥Î£åÎ∞∞ÏÜ°</p>
      <p>
        ‚Ä¢ Ï†úÌíà ÏàòÎ†πÏùºÎ°úÎ∂ÄÌÑ∞ 14Ïùº Ïù¥ÎÇ¥ Ï†úÌíàÏóê ÎåÄÌï¥ÏÑúÎßå Î¨¥Î£å Î∞òÌíà ÏÑúÎπÑÏä§Í∞Ä
        Í∞ÄÎä•Ìï©ÎãàÎã§.
      </p>
      <p>‚Ä¢ ÎÇòÏù¥ÌÇ§Îäî ÍµêÌôò ÏÑúÎπÑÏä§Î•º Ï†úÍ≥µÌïòÏßÄ ÏïäÏäµÎãàÎã§.</p>
      <p>
        ÏùºÎ∞ò Î∞∞ÏÜ°
        <u>
          <a href="/test">ÏûêÏÑ∏Ìûà ÏïåÏïÑÎ≥¥Í∏∞</a>
        </u>
      </p>
      <p>
        Î∞òÌíà
        <u>
          <a href="/test">ÏûêÏÑ∏Ìûà ÏïåÏïÑÎ≥¥Í∏∞</a>
        </u>
      </p>
      <p>
        <br />
      </p>
      <p>Ïò§ÎäòÎèÑÏ∞© ÏÑúÎπÑÏä§</p>
      <p>
        ‚Ä¢ Ïù¥Ïö©ÏãúÍ∞Ñ: Ïò§Ï†Ñ 10Ïãú 30Î∂ÑÍπåÏßÄ Í≤∞Ï†ú Ïãú, ÎãπÏùº ÎèÑÏ∞© (ÏùºÏöîÏùº, Í≥µÌú¥Ïùº Ï†úÏô∏)
      </p>
      <p>
        ‚Ä¢ ÏÑúÎπÑÏä§ÏßÄÏó≠: ÏÑúÏö∏‚àôÍ≥ºÏ≤ú‚àôÏùòÏôï‚àôÍµ∞Ìè¨‚àôÏàòÏõê‚àôÏÑ±ÎÇ®‚àôÏïàÏñëÏãú Ï†ÑÏ≤¥, Ïö©Ïù∏Ïãú
        ÏàòÏßÄÍµ¨‚àôÍ∏∞Ìù•Íµ¨, Î∂ÄÏ≤úÏãú Ï§ëÎèô‚àôÏÉÅÎèô‚àôÏã¨Í≥°Îèô
      </p>
      <p>‚Ä¢ ÏÑúÎπÑÏä§ÎπÑÏö©: 5,000Ïõê</p>
      <p>
        <u>
          <a href="/test">ÏûêÏÑ∏Ìûà ÏïåÏïÑÎ≥¥Í∏∞</a>
        </u>
      </p>
      <p>&nbsp;</p>
      <p>A/S ÏïàÎÇ¥</p>
      <p>
        ‚Ä¢ ÎÇòÏù¥ÌÇ§ Ïò®ÎùºÏù∏ÏóêÏÑú Íµ¨Îß§ÌïòÏã† Ï†úÌíàÏóê ÎåÄÌïú A/S Îäî ÎÇòÏù¥ÌÇ§ÏΩîÎ¶¨ÏïÑ Í≥†Í∞ùÏÑºÌÑ∞(
        <u>
          <b>
            <a href="/test">080-022-0182</a>
          </b>
        </u>
        )ÏóêÏÑú Ïú†ÏÑ†ÏúºÎ°úÎßå Ï†ëÏàò Í∞ÄÎä•Ìï©ÎãàÎã§.
      </p>
      <p>
        <u>
          <a href="/test">ÏûêÏÑ∏Ìûà ÏïåÏïÑÎ≥¥Í∏∞</a>
        </u>
      </p>
    </GuideContainer>
  );
};

const AdditionalInfoContainer = styled(GuideContainer)`
  p:first-child {
    margin-bottom: 0.5em;
  }

  & li {
    display: list-item;
    list-style: disc;
    margin-left: 16px;
  }

  & a {
    font-weight: 500;
    font-family: "Noto Sans KR Medium", "Arial Bold", "Helvetica Now Text",
      Helvetica, Arial, Dotum, "√™¬µ¬≠√¨‚Äì¬¥", Gulim, sans-serif;
    box-shadow: inset 0 -1px 0 0 #111;
    padding-bottom: 4px;
  }
`;

const AdditionalInfo = () => {
  return (
    <AdditionalInfoContainer direction="column" align="flex-start">
      <div>
        <div>
          <p>ÏÉÅÌíàÏ†ïÎ≥¥Ï†úÍ≥µÍ≥†Ïãú</p>
          <ul>
            <li>
              Ï†úÏ°∞Ïó∞Ïõî: ÏàòÏûÖÏ†úÌíàÏúºÎ°ú Í∞Å Ï†úÌíàÎ≥Ñ ÏûÖÍ≥† ÏãúÍ∏∞Ïóê Îî∞Îùº ÏÉÅÏù¥ÌïòÏó¨ Ï†ïÌôïÌïú
              Ï†úÏ°∞Ïó∞Ïõî Ï†úÍ≥µÏù¥ Ïñ¥Î†µÏäµÎãàÎã§. Ï†úÏ°∞Ïó∞ÏõîÏùÑ ÌôïÏù∏ÌïòÏãúÎ†§Î©¥ Í≥†Í∞ùÏÑºÌÑ∞Ïóê
              Î¨∏ÏùòÌïòÏãúÍ∏∞ Î∞îÎùºÎ©∞, Ï†ïÌôïÌïú Ï†úÏ°∞Ïó∞ÏõîÏùÄ Î∞∞ÏÜ°Î∞õÏúºÏã† Ï†úÌíàÏùò ÎùºÎ≤®ÏùÑ
              Ï∞∏Í≥†ÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.
            </li>
          </ul>
        </div>
        <div>
          <ul>
            <li>
              A/S Ï±ÖÏûÑÏûêÏôÄ Ï†ÑÌôîÎ≤àÌò∏: (Ïú†)ÎÇòÏù¥ÌÇ§ÏΩîÎ¶¨ÏïÑ Ïò®ÎùºÏù∏ Ïä§ÌÜ†Ïñ¥ Í≥†Í∞ùÏÑºÌÑ∞ /
              080-022-0182
            </li>
            <li>
              ÏÑ∏ÌÉÅÎ∞©Î≤ï Î∞è Ï∑®Í∏âÏãú Ï£ºÏùòÏÇ¨Ìï≠: ÏûêÏÑ∏Ìïú ÎÇ¥Ïö©ÏùÄ '
              <a href="/test">ÏûêÏÑ∏Ìûà Î≥¥Í∏∞</a>'Î•º ÌÅ¥Î¶≠ÌïòÏó¨ ÌôïÏù∏ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§.
            </li>
            <li>
              ÎØ∏ÏÑ±ÎÖÑÏûê Í∂åÎ¶¨ Î≥¥Ìò∏ ÏïàÎÇ¥: ÏûêÏÑ∏Ìïú ÎÇ¥Ïö©ÏùÄ '
              <a href="/test">ÏûêÏÑ∏Ìûà Î≥¥Í∏∞</a>' Î•º ÌÅ¥Î¶≠ÌïòÏó¨ ÌôïÏù∏ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§.
            </li>
            <li>
              ÌíàÏßàÎ≥¥Ï¶ùÍ∏∞Ï§Ä: ÌíàÏßàÎ≥¥Ï¶ùÍ∏∞Í∞Ñ-ÏÑ¨Ïú† Î∞è ÏùºÎ∞ò ÏÜåÏû¨(Íµ¨ÏûÖ ÌõÑ 6Í∞úÏõî),
              Í∞ÄÏ£ΩÏÜåÏû¨(Íµ¨ÏûÖ ÌõÑ 1ÎÖÑ). Ïú†ÌÜµ Ï§ë ÏÜêÏÉÅÎêòÏóàÍ±∞ÎÇò ÌíàÏßàÏóê Ïù¥ÏÉÅÏù¥ ÏûàÎäî
              Ï†úÌíàÏóê ÌïúÌïòÏó¨ ÏÜåÎπÑÏûê ÌîºÌï¥ Î≥¥ÏÉÅ Í∑úÏ†ïÏóê ÏùòÍ±∞ Î≥¥ÏÉÅÌïòÏó¨ ÎìúÎ¶ΩÎãàÎã§. Îã®,
              Ï†úÌíàÏóê Î∂ÄÏ∞©ÎêòÏñ¥ ÏûàÎäî ÏÇ¨Ïö©Î∞©Î≤ï Î∞è Ï∑®Í∏â Ïãú Ï£ºÏùòÏÇ¨Ìï≠Ïóê Îî∞Îùº Ï†úÌíàÏùÑ
              Í¥ÄÎ¶¨Ìï¥ Ï£ºÏãúÍ≥†, ÏÜåÎπÑÏûê Î∂ÄÏ£ºÏùòÎ°ú Ïù∏Ìïú ÌíàÏßà Ïù¥ÏÉÅ Î∞è Î≥ÄÌòïÏóê ÎåÄÌï¥ÏÑúÎäî
              Ï±ÖÏûÑÏùÑ ÏßÄÏßÄ ÏïäÏäµÎãàÎã§.
            </li>
          </ul>
        </div>
        <div>
          <ul>
            <li>
              Ï†úÏ°∞Ïûê/ÏàòÏûÖÌíàÏùò Í≤ΩÏö∞ ÏàòÏûÖÏûêÎ•º Ìï®Íªò ÌëúÍ∏∞: Nike. Inc /
              (Ïú†)ÎÇòÏù¥ÌÇ§ÏΩîÎ¶¨ÏïÑ
            </li>
          </ul>
        </div>
      </div>
    </AdditionalInfoContainer>
  );
};

const ReviewItemContainer = styled(FlexBox)`
  width: 100%;
  font: var(--podium-cds-typography-body1);
  padding-bottom: var(--podium-cds-size-spacing-l);
`;

const ReviewTitle = styled.p`
  font: var(--podium-cds-typography-body1-strong);

  margin-bottom: 8px;
`;

const ReviewSubTitle = styled.p`
  font: var(--podium-cds-typography-body1);
  color: #707072;
`;

const ReviewContentContainer = styled.div`
  width: 100%;
  margin-top: 16px;
  min-height: 78px;
`;

interface ReviewContentWrapperProps {
  isOverflow: boolean;
}

const ReviewContentWrapper = styled.div.withConfig({
  shouldForwardProp: (prop: string) => prop !== "isOverflow",
})<ReviewContentWrapperProps>`
  width: 100%;

  font: var(--podium-cds-typography-body1);
  height: auto;
  ${({ isOverflow }) =>
    isOverflow &&
    css`
      height: 78px;
      overflow: hidden;
      transition: height 0.9s;
    `}
`;

const UnderlinedButton = styled.button`
  border-bottom: var(--podium-cds-size-border-width-m) solid
    var(--podium-cds-color-text-primary);
  box-shadow: inset 0 var(--podium-cds-button-box-shadow-width) 0 0
    var(--podium-cds-color-text-primary);

  font: var(--podium-cds-typography-body1-strong);
  margin-bottom: 16px;
  cursor: pointer;
`;

interface ReviewItemProps {
  item: Review;
}

const ReviewItem = ({ item }: ReviewItemProps) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isOverflow, setIsOverflow] = useState(false);
  const contentRef = useRef<HTMLDivElement | null>(null);

  useLayoutEffect(() => {
    setIsOverflow(() => {
      if (contentRef.current) {
        return contentRef.current.offsetHeight > 78;
      } else return false;
    });
  }, []);

  return (
    <ReviewItemContainer direction="column" align="flex-start">
      <ReviewTitle>{item.title}</ReviewTitle>
      <FlexBox isFull={true} justify="space-between">
        <StarScore score={item.score} />
        <ReviewSubTitle>
          {item.author + " - " + item.date.toLocaleDateString()}
        </ReviewSubTitle>
      </FlexBox>
      <ReviewContentContainer>
        <ReviewContentWrapper ref={contentRef} isOverflow={isOverflow}>
          {item.content}
        </ReviewContentWrapper>
      </ReviewContentContainer>

      {(isOverflow || isOpen) && (
        <UnderlinedButton
          onClick={() => {
            setIsOpen((prev) => !prev);
            setIsOverflow((prev) => !prev);
          }}
        >
          {isOpen ? "Ïà®Í∏∞Í∏∞" : "Îçî Î≥¥Í∏∞"}
        </UnderlinedButton>
      )}
    </ReviewItemContainer>
  );
};

const ReviewContainer = styled(FlexBox)`
  width: 100%;
`;

const ScoreSpan = styled.span`
  font: var(--podium-cds-typography-body1);
  margin-left: 16px;
`;
interface ReviewSectionProps {
  score: number;
}
const ReviewSection = ({ score }: ReviewSectionProps) => {
  return (
    <ReviewContainer direction="column" align="flex-start">
      <FlexBox direction="column" align="flex-start">
        <FlexBox style={{ marginBottom: "8px" }}>
          <StarScore score={score} />
          <ScoreSpan>{score}Ï†ê</ScoreSpan>
        </FlexBox>
        <UnderlinedButton style={{ marginBottom: "48px" }}>
          Î¶¨Î∑∞ ÏûëÏÑ±ÌïòÍ∏∞
        </UnderlinedButton>
      </FlexBox>

      <>
        {reviews.map((review) => (
          <ReviewItem item={review} />
        ))}
      </>
      <UnderlinedButton style={{ marginBottom: "48px" }}>
        Î¶¨Î∑∞ Îçî Î≥¥Í∏∞
      </UnderlinedButton>
    </ReviewContainer>
  );
};
